@page "/embassy"
@using Microsoft.AspNetCore.Authorization
@using VirtualVisaCenter.Shared.Entities
@using VirtualVisaCenter.WEB.Repositories
@using VirtualVisaCenter.WEB.Shared
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Embajada</h3>

<div class="card">
    <div class="card-header">
        <span>
            <i class="bi bi-person" /> Embajadas
            <a class="btn btn-primary btn-sm float-end" href="/customer/create"><i class="bi bi-plus-circle" />Nueva embajada</a>

        </span>
    </div>

    <div class="card-body">

        <GenericList MyList="embassies">

            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in embassies!)
                        {
                            <tr>


                                <td>
                                    @item.Id
                                </td>
                                <td>
                                    @item.Name
                                </td>
                                <td>
                                    @item.Country
                                </td>
                                <td>
                                    @item.Phone
                                </td>
                                <td>
                                    @item.Address
                                </td>
                                <td>
                                    @item.Email
                                </td>
                                <td>
                                    @item.OfficeHours
                                </td>
                                <td>
                                    @item.Website
                                </td>
                                <td>
                                    @item.Ambassador
                                </td>
                                <td>
                                    @item.Requests
                                </td>
                                <td>
                                    <a href="/embassy/edit/@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square" /> Editar</a>

                                    <button @onclick=@(() => DeleteAsycn(item)) class="btn btn-sm btn-danger"><i class="bi bi-trash-fill" /> Borrar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
        </GenericList>
    </div>
</div>


@code {
    public List<Embassy> embassies { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Embassy>>("api/embassies");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        embassies = responseHttp.Response;
    }



    private async Task DeleteAsycn(Embassy embassy)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Estas seguro de querer borrar: {embassy.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync<Embassy>($"api/embassies/{embassy.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("embassy");
            }
            else
            {
                var mensajeError = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            return;
        }

        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }

}
